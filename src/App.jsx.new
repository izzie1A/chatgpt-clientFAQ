import { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import { askChatGPT, testAPIKey } from './api/chatgpt';
import FaqPage from './pages/FaqPage';

// Navbar Component
const Navbar = () => {
  return (
    <nav style={{
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      padding: '1rem 2rem',
      backgroundColor: '#fff',
      boxShadow: '0 2px 10px rgba(0, 0, 0, 0.05)',
      position: 'sticky',
      top: 0,
      zIndex: 1000,
    }}>
      <Link to="/" style={{
        textDecoration: 'none',
        fontSize: '1.5rem',
        fontWeight: 'bold',
        background: 'linear-gradient(90deg, #4a6fa5, #5e9ce0)',
        WebkitBackgroundClip: 'text',
        WebkitTextFillColor: 'transparent',
        backgroundClip: 'text',
      }}>
        ChatGPT
      </Link>
      <div style={{ display: 'flex', gap: '2rem' }}>
        <Link to="/" style={navLinkStyle}>Home</Link>
        <Link to="/faq" style={navLinkStyle}>FAQ</Link>
      </div>
    </nav>
  );
};

const navLinkStyle = {
  textDecoration: 'none',
  color: '#6c757d',
  fontWeight: '500',
  padding: '0.5rem 0',
  transition: 'all 0.3s ease',
  fontSize: '1.1rem',
  ':hover': {
    color: '#4a6fa5',
  },
};

// Main App Component
function App() {
  const [input, setInput] = useState('');
  const [reply, setReply] = useState('');
  const [selectedQuestion, setSelectedQuestion] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  // Common questions for the dropdown
  const commonQuestions = [
    { value: '', label: 'Select a common question...' },
    { value: 'shipping', label: 'When is the shipping estimate date?' },
    { value: 'return', label: 'What is your return policy?' },
    { value: 'tracking', label: 'How can I track my order?' },
    { value: 'payment', label: 'What payment methods do you accept?' },
    { value: 'custom', label: 'Custom question...' }
  ];

  // Handle question selection from dropdown
  const handleQuestionSelect = (e) => {
    const questionType = e.target.value;
    setSelectedQuestion(questionType);

    if (questionType !== 'custom' && questionType !== '') {
      const selected = commonQuestions.find(q => q.value === questionType);
      setInput(selected?.label || '');
    } else if (questionType === 'custom') {
      setInput('');
    }
  };

  // Test API connection on component mount
  useEffect(() => {
    const testConnection = async () => {
      console.log('Testing API Key connection...');
      const isConnected = await testAPIKey();
      if (isConnected) {
        console.log('✅ API Key connected successfully!');
      } else {
        console.error('❌ API Key connection failed, please check your API Key');
      }
    };
    testConnection();
  }, []);

  const handleSend = async () => {
    if (!input.trim()) return;
    setIsLoading(true);
    setError(null);

    try {
      const res = await askChatGPT(input);
      setReply(res);
    } catch (err) {
      setError(`Error: ${err.message || 'Failed to get response from ChatGPT'}`);
      setReply('Sorry, there was an error processing your request.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleTestShippingQuestion = async () => {
    if (!selectedQuestion) {
      setError('Please select a question or type your own');
      return;
    }

    const question = selectedQuestion && selectedQuestion !== 'custom'
      ? commonQuestions.find(q => q.value === selectedQuestion)?.label || input
      : input.trim();

    if (!question) return;

    setInput(question);
    setIsLoading(true);
    setError(null);

    try {
      const res = await askChatGPT(question);
      setReply(res);
    } catch (err) {
      setError(`Error: ${err.message || 'Failed to get response from ChatGPT'}`);
      setReply('Sorry, there was an error processing your request.');
    } finally {
      setIsLoading(false);
    }
  };

  // Styles
  const styles = {
    appContainer: {
      minHeight: '100vh',
      backgroundColor: '#f8f9fa',
    },
    container: {
      padding: '24px',
      maxWidth: '800px',
      margin: '0 auto',
      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif",
      color: '#333',
      lineHeight: 1.6,
      boxSizing: 'border-box',
    },
    header: {
      textAlign: 'center',
      marginBottom: '32px',
    },
    select: {
      width: '100%',
      padding: '12px',
      marginBottom: '16px',
      borderRadius: '8px',
      border: '1px solid #ddd',
      fontSize: '16px',
      backgroundColor: '#fff',
    },
    button: {
      backgroundColor: '#4a6fa5',
      color: 'white',
      border: 'none',
      padding: '12px 24px',
      borderRadius: '8px',
      cursor: 'pointer',
      fontSize: '16px',
      marginRight: '12px',
      transition: 'all 0.3s ease',
      ':hover': {
        backgroundColor: '#3a5a80',
      },
      ':disabled': {
        backgroundColor: '#cccccc',
        cursor: 'not-allowed',
      },
    },
    textarea: {
      width: '100%',
      padding: '12px',
      borderRadius: '8px',
      border: '1px solid #ddd',
      fontSize: '16px',
      marginBottom: '16px',
      resize: 'vertical',
      minHeight: '120px',
      ':focus': {
        outline: 'none',
        borderColor: '#4a6fa5',
        boxShadow: '0 0 0 2px rgba(74, 111, 165, 0.2)',
      },
    },
    responseContainer: {
      marginTop: '32px',
      padding: '20px',
      backgroundColor: '#fff',
      borderRadius: '8px',
      boxShadow: '0 2px 4px rgba(0,0,0,0.05)',
    },
    responseTitle: {
      marginTop: 0,
      color: '#2c3e50',
    },
    error: {
      color: '#e74c3c',
      marginTop: '8px',
    },
    loading: {
      color: '#7f8c8d',
      fontStyle: 'italic',
    },
  };

  // Chat Interface Component
  const ChatInterface = () => (
    <>
      <div style={styles.header}>
        <h1 style={{
          margin: 0,
          fontSize: '2.2em',
          background: 'linear-gradient(90deg, #4a6fa5, #5e9ce0)',
          WebkitBackgroundClip: 'text',
          WebkitTextFillColor: 'transparent',
          backgroundClip: 'text',
          textFillColor: 'transparent',
          fontWeight: '800',
          letterSpacing: '-0.5px',
          textShadow: '0 2px 4px rgba(0,0,0,0.1)'
        }}>Talk to ChatGPT</h1>
        <p style={{
          color: '#6c757d',
          fontSize: '1.1em',
          maxWidth: '600px',
          margin: '12px auto 0',
          lineHeight: '1.5'
        }}>
          Ask me anything about shipping, returns, or other topics!
        </p>
      </div>

      <div style={{ marginBottom: '32px' }}>
        <div style={{ marginBottom: '16px' }}>
          <select
            value={selectedQuestion}
            onChange={handleQuestionSelect}
            style={styles.select}
            disabled={isLoading}
          >
            {commonQuestions.map((q) => (
              <option key={q.value} value={q.value}>
                {q.label}
              </option>
            ))}
          </select>
        </div>

        <button
          onClick={handleTestShippingQuestion}
          disabled={isLoading || !selectedQuestion}
          style={{
            ...styles.button,
            ...(isLoading && { backgroundColor: '#cccccc', cursor: 'not-allowed' })
          }}
        >
          {isLoading ? 'Sending...' : 'Ask Selected Question'}
        </button>
      </div>

      <div style={{ marginBottom: '24px' }}>
        <textarea
          rows="8"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Type your question here..."
          style={styles.textarea}
          disabled={isLoading}
        />

        <button
          onClick={handleSend}
          disabled={isLoading || !input.trim()}
          style={{
            ...styles.button,
            ...((isLoading || !input.trim()) && { backgroundColor: '#cccccc', cursor: 'not-allowed' })
          }}
        >
          {isLoading ? 'Sending...' : 'Send Message'}
        </button>
      </div>

      <div style={styles.responseContainer}>
        <h3 style={styles.responseTitle}>ChatGPT Response:</h3>
        {isLoading ? (
          <p style={styles.loading}>Loading response...</p>
        ) : error ? (
          <p style={styles.error}>{error}</p>
        ) : reply ? (
          <div style={{ whiteSpace: 'pre-line' }}>{reply}</div>
        ) : (
          <p style={styles.loading}>Send a message to get a response...</p>
        )}
      </div>
    </>
  );

  return (
    <Router>
      <div style={styles.appContainer}>
        <Navbar />
        <div style={styles.container}>
          <Routes>
            <Route path="/" element={<ChatInterface />} />
            <Route path="/faq" element={<FaqPage />} />
          </Routes>
        </div>
      </div>
    </Router>
  );
}

export default App;
